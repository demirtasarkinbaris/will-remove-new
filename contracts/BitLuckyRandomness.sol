// SPDX-License-Identifier: MIT
pragma solidity 0.8.19;

// Importing Chainlink's base contract for consuming VRF (Verifiable Random Function)
import "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol";
import "@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol";

/**
 * @title BitLuckyRandomness
 * @dev This contract integrates Chainlink VRF to provide verifiable randomness.
 * @notice Each request for randomness should be associated with a unique requestId.
 */
contract BitLuckyRandomness is VRFConsumerBaseV2 {
    VRFCoordinatorV2Interface COORDINATOR;
    uint64 subscriptionId;
    address vrfCoordinator = 0x7a1BaC17Ccc5b313516C5E16fb24f7659aA5ebed;
    bytes32 keyHash =
        0x4b09e658ed251bcafeebbc69400383d49f344ace09b9576fe248bb02c003fe9f;
    uint32 callbackGasLimit = 100000;
    uint16 requestConfirmations = 3;
    uint32 numNumbers = 1;

    uint256[] public randomNumbers;
    uint256 public requestId;
    address owner;

    /**
     * @dev Contract constructor that sets the subscriptionId and the owner of the contract.
     * @param _subscriptionId The subscriptionId for the Chainlink VRF Coordinator.
     */
    constructor(uint64 _subscriptionId) VRFConsumerBaseV2(vrfCoordinator) {
        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);
        owner = msg.sender;
        subscriptionId = _subscriptionId;
    }

    /**
     * @dev Makes a request to the Chainlink VRF Coordinator for randomness.
     * @notice This function should be called when you want to generate a new random number.
     */
    function getRandomNumbers() public onlyOwner {
        requestId = COORDINATOR.requestRandomWords(
            keyHash,
            subscriptionId,
            requestConfirmations,
            callbackGasLimit,
            numNumbers
        );
    }

    /**
     * @dev Callback function used by the VRF Coordinator to return the random number.
     * @param randomWords The random number generated by the VRF.
     */
    function fulfillRandomWords(
        uint256 /* requestId */,
        uint256[] memory randomWords
    ) internal override {
        randomNumbers = randomWords;
    }

    /**
     * @dev Returns a random number from the array of generated random numbers.
     * @param value The upper limit for the random number.
     * @return A random number between 1 and 'value'.
     */
    function getRandomNum(uint256 value) public view returns (uint256) {
        uint256 randomNumber = randomNumbers[0];
        return (randomNumber % value) + 1;
    }

    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
}
